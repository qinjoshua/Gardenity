@{
    ViewData["Title"] = "Create Page";
}

<div class="text-center">
    <h4>Create your own Community Plot!</h4>
</div>

<div id="canvasWrapper">
    <canvas id="canvas" width=500 height="500"></canvas>

</div>

<div>
    <button id="save">Save</button>
</div>

    <div class="modal fade" id="largeModal" tabindex="-1" role="dialog" aria-labelledby="largeModal" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title" id="myModalLabel">Large Modal</h4>
          </div>
          <div class="modal-body">
            <h3>Modal Body</h3>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary">Save changes</button>
          </div>
        </div>
      </div>
    </div>





<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>

@*<script>
    // get references to the canvas and context
    var canvas = document.getElementById("canvas");
    var overlay = document.getElementById("overlay");
    var ctx = canvas.getContext("2d");
    var ctxo = overlay.getContext("2d");
    //var garden = new Garden();

    var background = new Image();
    background.src = "/images/grass.jpg";

    // Make sure the image is loaded first otherwise nothing will draw.
    background.onload = function(){
    ctxo.drawImage(background,0,0);   
}

    // style the context
    ctx.strokeStyle = "brown";
    ctx.fillStyle = "brown";
    ctx.lineWidth = 3;
    ctxo.strokeStyle = "brown";
    ctxo.fillStyle = "brown";
    ctxo.lineWidth = 3;

    // calculate where the canvas is on the window
    // (used to help calculate mouseX/mouseY)
    var scanvas = $("#canvas");
    var canvasOffset = scanvas.offset();
    var offsetX = canvasOffset.left;
    var offsetY = canvasOffset.top;
    var scrollX = scanvas.scrollLeft();
    var scrollY = scanvas.scrollTop();

    // this flage is true when the user is dragging the mouse
    var isDown = false;

    // these vars will hold the starting mouse position
    var startX;
    var startY;

    var prevStartX = 0;
    var prevStartY = 0;

    var prevWidth = 0;
    var prevHeight = 0;

    function handleMouseDown(e) {
        e.preventDefault();
        e.stopPropagation();

        // save the starting x/y of the rectangle
        startX = parseInt(e.clientX - offsetX);
        startY = parseInt(e.clientY - offsetY);

        // set a flag indicating the drag has begun
        isDown = true;
    }

    function handleMouseUp(e) {
        e.preventDefault();
        e.stopPropagation();

        // the drag is over, clear the dragging flag
        isDown = false;
        ctxo.fillRect(prevStartX, prevStartY, prevWidth, prevHeight);
        //garden.addPlot(new Plot(prevStartX, prevStartY, prevWidth, prevHeight));
    }

    function handleMouseOut(e) {
        e.preventDefault();
        e.stopPropagation();

        // the drag is over, clear the dragging flag
        isDown = false;
    }

    function handleMouseMove(e) {
        e.preventDefault();
        e.stopPropagation();

        // if we're not dragging, just return
        if (!isDown) {
            return;
        }

        // get the current mouse position
        mouseX = parseInt(e.clientX - offsetX);
        mouseY = parseInt(e.clientY - offsetY);

        // Put your mousemove stuff here



        // calculate the rectangle width/height based
        // on starting vs current mouse position
        var width = mouseX - startX;
        var height = mouseY - startY;

        // clear the canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // draw a new rect from the start position
        // to the current mouse position
        ctx.strokeRect(startX, startY, width, height);

        prevStartX = startX;
        prevStartY = startY;

        prevWidth = width;
        prevHeight = height;
    }

    // listen for mouse events
    $("#canvas").mousedown(function (e) {
        handleMouseDown(e);
    });
    $("#canvas").mousemove(function (e) {
        handleMouseMove(e);
    });
    $("#canvas").mouseup(function (e) {
        handleMouseUp(e);
    });

    $("#canvas").mouseout(function (e) {
        handleMouseOut(e);
    });

    // Setup download button event listener
    document.querySelector('#download').addEventListener('click', () => {
        var canvas = document.querySelector("canvas");
        var image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");

        var element = document.createElement('a');
        var filename = 'test.png';
        element.setAttribute('href', image);
        element.setAttribute('download', filename);

        element.click();
    })
</script>

*@
